import { describe, it, expect } from "bun:test";
// @ts-ignore: This file is expected to be generated by the agent in a subdirectory
import { isNullOrEmpty, capitalizeFirstLetter } from "./src/utils";

describe("isNullOrEmpty", () => {
  it("should return true for null", () => {
    expect(isNullOrEmpty(null)).toBe(true);
  });

  it("should return true for undefined", () => {
    expect(isNullOrEmpty(undefined)).toBe(true);
  });

  it("should return true for an empty string", () => {
    expect(isNullOrEmpty("")).toBe(true);
  });

  it("should return false for a non-empty string", () => {
    expect(isNullOrEmpty("hello")).toBe(false);
  });

  it("should return false for a string with only spaces", () => {
    expect(isNullOrEmpty("  ")).toBe(false);
  });
});

describe("capitalizeFirstLetter", () => {
  it("should capitalize the first letter of a word", () => {
    expect(capitalizeFirstLetter("hello")).toBe("Hello");
  });

  it("should return an empty string for an empty input string", () => {
    expect(capitalizeFirstLetter("")).toBe("");
  });

  it("should handle already capitalized strings", () => {
    expect(capitalizeFirstLetter("World")).toBe("World");
  });

  it("should return an empty string for null input", () => {
    // @ts-ignore: Testing behavior with null input as per prompt
    expect(capitalizeFirstLetter(null)).toBe("");
  });

  it("should return an empty string for undefined input", () => {
    // @ts-ignore: Testing behavior with undefined input as per prompt
    expect(capitalizeFirstLetter(undefined)).toBe("");
  });

  it("should handle single character strings", () => {
    expect(capitalizeFirstLetter("a")).toBe("A");
  });

  it("should handle strings with leading spaces (first char of actual string)", () => {
    expect(capitalizeFirstLetter(" test")).toBe(" Test");
  });
});
